---
targetClass:
  fullClassName: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditPrecommitPlugin"
methods:
- method:
    name: "createTask"
    sourceCodeSignature: "TaskProvider<? extends Task> createTask(Project project)"
    returnType: "org.gradle.api.tasks.TaskProvider"
    genericReturnType: "? extends org.gradle.api.Task"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    instructionFingerprint: "1DFDC5CB17866A83A094A10B23A28724"
  paths:
  - testPathName: "createTaskWhenProjectGetRootProjectGetAllprojectsIsNotEmpty"
    constructorSignature: "<init>() : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "STATIC"
      name: "GradleUtils.class"
      valueUuid: "GradleUtils.class"
      methodExercised:
        expression: "getJavaSourceSets(project):sourceSetContainer"
    - type: "LOCAL_VARIABLE"
      valueUuid: "configurationContainer"
      methodExercised:
        expression: "getByName(name2):configuration"
        throwsExceptions:
        - "org.gradle.api.artifacts.UnknownConfigurationException"
    - type: "LOCAL_VARIABLE"
      name: "p"
      valueUuid: "object"
      methodExercised:
        expression: "getBuildDir():file"
    - type: "LOCAL_VARIABLE"
      name: "p"
      valueUuid: "object"
      methodExercised:
        expression: "getPath():string"
    - type: "LOCAL_VARIABLE"
      name: "mainSourceSet"
      valueUuid: "object2"
      methodExercised:
        expression: "getJava():sourceDirectorySet"
    - type: "LOCAL_VARIABLE"
      name: "mainSourceSet"
      valueUuid: "object2"
      methodExercised:
        expression: "getAllSource():sourceDirectorySet2"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getTasks():taskContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getRootProject():project2"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getConfigurations():configurationContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "provider(value-any):provider"
    - type: "LOCAL_VARIABLE"
      valueUuid: "project2"
      methodExercised:
        expression: "getAllprojects():set"
    - type: "LOCAL_VARIABLE"
      valueUuid: "setProperty"
      methodExercised:
        expression: "set(provider):void4"
    - type: "LOCAL_VARIABLE"
      valueUuid: "sourceDirectorySet"
      methodExercised:
        expression: "getSourceDirectories():fileCollection"
    - type: "LOCAL_VARIABLE"
      valueUuid: "sourceDirectorySet2"
      methodExercised:
        expression: "getSrcDirs():set2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "sourceSetContainer"
      methodExercised:
        expression: "findByName(name3):object2"
    - type: "LOCAL_VARIABLE"
      name: "t"
      valueUuid: "splitPackagesAuditTask"
      methodExercised:
        expression: "setProjectBuildDirs(hashMap):void2"
    - type: "LOCAL_VARIABLE"
      name: "t"
      valueUuid: "splitPackagesAuditTask"
      methodExercised:
        expression: "setClasspath(configuration):void3"
    - type: "LOCAL_VARIABLE"
      name: "t"
      valueUuid: "splitPackagesAuditTask"
      methodExercised:
        expression: "dependsOn(objectArray):task"
    - type: "LOCAL_VARIABLE"
      name: "t"
      valueUuid: "splitPackagesAuditTask"
      methodExercised:
        expression: "getSrcDirs():setProperty"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer"
      methodExercised:
        expression: "register(name,class-SplitPackagesAuditTask):taskProvider"
        throwsExceptions:
        - "org.gradle.api.InvalidUserDataException"
    - type: "LOCAL_VARIABLE"
      name: "task"
      valueUuid: "taskProvider"
      methodExercised:
        expression: "configure(action-any):void"
    - type: "RESULT"
      name: "result"
      valueUuid: "taskProvider"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditPrecommitPlugin"
        parameters: []
      valueType: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditPrecommitPlugin"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.util.GradleUtils"
      uuid: "GradleUtils.class"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSetContainer"
      uuid: "sourceSetContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.ConfigurationContainer"
      uuid: "configurationContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.Configuration"
      uuid: "configuration"
    - sapientType: "BASIC"
      content: !<regular>
        value: "compileClasspath"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPath1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.SourceDirectorySet"
      uuid: "sourceDirectorySet"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.SourceDirectorySet"
      uuid: "sourceDirectorySet2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.provider.Provider"
      uuid: "provider"
    - sapientType: "ANY"
      valueType: "java.util.concurrent.Callable"
      uuid: "value-any"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.gradle.api.Project"
          uuid: "object"
      valueType: "java.util.Set"
      genericValueType: "org.gradle.api.Project"
      uuid: "set"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.provider.SetProperty"
      genericValueType: "java.io.File"
      uuid: "setProperty"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.FileCollection"
      uuid: "fileCollection"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.io.File"
      uuid: "set2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "main"
      valueType: "java.lang.String"
      uuid: "name3"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditTask"
      uuid: "splitPackagesAuditTask"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "OBJECT"
              content: !<new>
                target: "java.io.File"
                parameters:
                - name: "pathname"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "pathname1"
                    valueType: "java.lang.String"
                    uuid: "file-pathname"
              valueType: "java.io.File"
              uuid: "file"
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "return_of_getPath1"
              valueType: "java.lang.String"
              uuid: "string"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.io.File,java.lang.String"
          uuid: "pair"
      valueType: "java.util.Map"
      genericValueType: "java.io.File,java.lang.String"
      uuid: "hashMap"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Task"
      uuid: "task"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.gradle.api.file.FileCollection"
            uuid: "fileCollection"
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      genericValueType: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditTask"
      uuid: "taskProvider"
    - sapientType: "BASIC"
      content: !<regular>
        value: "splitPackagesAudit"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditTask"
      valueType: "java.lang.Class"
      genericValueType: "org.elasticsearch.gradle.internal.precommit.SplitPackagesAuditTask"
      uuid: "class-SplitPackagesAuditTask"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "action-any"
    branches:
    - lineNumber: 43
      expression: "for-each(project.getRootProject().getAllprojects())"
      range: "(43,26)-(43,66)"
      evaluatedAs: true
      internalMethodName: "getProjectBuildDirs"

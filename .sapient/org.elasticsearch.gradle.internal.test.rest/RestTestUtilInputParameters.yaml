---
targetClass:
  fullClassName: "org.elasticsearch.gradle.internal.test.rest.RestTestUtil"
methods:
- method:
    name: "registerTestTask"
    sourceCodeSignature: "Provider<RestIntegTestTask> registerTestTask(Project project,\
      \ SourceSet sourceSet)"
    returnType: "org.gradle.api.provider.Provider"
    genericReturnType: "org.elasticsearch.gradle.internal.test.RestIntegTestTask"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "sourceSet"
      type: "org.gradle.api.tasks.SourceSet"
    instructionFingerprint: "BCC09972AE6BD5777304FAB0BBF94B06"
  paths:
  - testPathName: "registerTestTaskTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "sourceSet"
      valueUuid: "sourceSet"
    - type: "STATIC"
      name: "RestTestUtil.class"
      valueUuid: "RestTestUtil.class"
      methodExercised:
        expression: "registerTestTask(project,sourceSet,string):taskProvider"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getName():string"
    - type: "RESULT"
      name: "result"
      valueUuid: "taskProvider"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "sourceSet"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.internal.test.rest.RestTestUtil"
      uuid: "RestTestUtil.class"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      genericValueType: "org.elasticsearch.gradle.internal.test.RestIntegTestTask"
      uuid: "taskProvider"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getName1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "registerTestTask"
    sourceCodeSignature: "TaskProvider<RestIntegTestTask> registerTestTask(Project\
      \ project, SourceSet sourceSet, String taskName)"
    returnType: "org.gradle.api.tasks.TaskProvider"
    genericReturnType: "org.elasticsearch.gradle.internal.test.RestIntegTestTask"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "sourceSet"
      type: "org.gradle.api.tasks.SourceSet"
    - name: "taskName"
      type: "java.lang.String"
    instructionFingerprint: "9973977346606DC22825E0BF0170DB10"
  paths:
  - testPathName: "registerTestTask1Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "sourceSet"
      valueUuid: "sourceSet"
    - type: "INPUT"
      name: "taskName"
      valueUuid: "taskName"
    - type: "LOCAL_VARIABLE"
      valueUuid: "pluginContainer"
      methodExercised:
        expression: "withType(class-JavaPlugin,configureAction-any):domainObjectCollection"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getTasks():taskContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getPlugins():pluginContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getTasks():taskContainer2"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getOutput():sourceSetOutput"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getRuntimeClasspath():fileCollection2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "sourceSetOutput"
      methodExercised:
        expression: "getClassesDirs():fileCollection"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer"
      methodExercised:
        expression: "register(taskName,class-RestIntegTestTask,configurationAction-any):taskProvider"
        throwsExceptions:
        - "org.gradle.api.InvalidUserDataException"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer2"
      methodExercised:
        expression: "named(name):taskProvider2"
        throwsExceptions:
        - "org.gradle.api.UnknownTaskException"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setGroup(group):void"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setDescription(description):void2"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "mustRunAfter(objectArray):task"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setTestClassesDirs(fileCollection):void3"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setClasspath(fileCollection2):void4"
    - type: "RESULT"
      name: "result"
      valueUuid: "taskProvider"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "sourceSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "taskName1"
      valueType: "java.lang.String"
      uuid: "taskName"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.PluginContainer"
      uuid: "pluginContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.DomainObjectCollection"
      uuid: "domainObjectCollection"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.gradle.api.plugins.JavaPlugin"
      valueType: "java.lang.Class"
      genericValueType: "org.gradle.api.plugins.JavaPlugin"
      uuid: "class-JavaPlugin"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "configureAction-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSetOutput"
      uuid: "sourceSetOutput"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.FileCollection"
      uuid: "fileCollection2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.FileCollection"
      uuid: "fileCollection"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      genericValueType: "org.elasticsearch.gradle.internal.test.RestIntegTestTask"
      uuid: "taskProvider"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.elasticsearch.gradle.internal.test.RestIntegTestTask"
      valueType: "java.lang.Class"
      genericValueType: "org.gradle.api.tasks.testing.Test"
      uuid: "class-RestIntegTestTask"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "configurationAction-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      uuid: "taskProvider2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "test"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.testing.Test"
      uuid: "test"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "BASIC"
      content: !<regular>
        value: "verification"
      valueType: "java.lang.String"
      uuid: "group"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Runs the REST tests against an external cluster"
      valueType: "java.lang.String"
      uuid: "description"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Task"
      uuid: "task"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.gradle.api.tasks.TaskProvider"
            uuid: "taskProvider2"
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
    mockedStaticClassesWithCallRealMethods:
    - "org.elasticsearch.gradle.internal.test.rest.RestTestUtil"
- method:
    name: "registerTestTask"
    sourceCodeSignature: "<T extends Test> TaskProvider<T> registerTestTask(Project\
      \ project, SourceSet sourceSet, String taskName, Class<T> clazz)"
    returnType: "org.gradle.api.tasks.TaskProvider"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "sourceSet"
      type: "org.gradle.api.tasks.SourceSet"
    - name: "taskName"
      type: "java.lang.String"
    - name: "clazz"
      type: "java.lang.Class"
      genericType: "org.gradle.api.tasks.testing.Test"
    instructionFingerprint: "F127950F822F0C8BD38F021BE92CBBE9"
  paths:
  - testPathName: "registerTestTask2Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "sourceSet"
      valueUuid: "sourceSet"
    - type: "INPUT"
      name: "taskName"
      valueUuid: "taskName"
    - type: "INPUT"
      name: "clazz"
      valueUuid: "clazz"
    - type: "LOCAL_VARIABLE"
      valueUuid: "pluginContainer"
      methodExercised:
        expression: "withType(class-JavaPlugin,configureAction-any):domainObjectCollection"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getTasks():taskContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getPlugins():pluginContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getTasks():taskContainer2"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getOutput():sourceSetOutput"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getRuntimeClasspath():fileCollection2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "sourceSetOutput"
      methodExercised:
        expression: "getClassesDirs():fileCollection"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer"
      methodExercised:
        expression: "register(taskName,clazz,configurationAction-any):taskProvider"
        throwsExceptions:
        - "org.gradle.api.InvalidUserDataException"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer2"
      methodExercised:
        expression: "named(name):taskProvider2"
        throwsExceptions:
        - "org.gradle.api.UnknownTaskException"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setGroup(group):void"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setDescription(description):void2"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "mustRunAfter(objectArray):task"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setTestClassesDirs(fileCollection):void3"
    - type: "LOCAL_VARIABLE"
      name: "testTask"
      valueUuid: "test"
      methodExercised:
        expression: "setClasspath(fileCollection2):void4"
    - type: "RESULT"
      name: "result"
      valueUuid: "taskProvider"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "sourceSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "taskName1"
      valueType: "java.lang.String"
      uuid: "taskName"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.gradle.api.tasks.testing.Test"
      valueType: "java.lang.Class"
      genericValueType: "org.gradle.api.tasks.testing.Test"
      uuid: "clazz"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.PluginContainer"
      uuid: "pluginContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.DomainObjectCollection"
      uuid: "domainObjectCollection"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.gradle.api.plugins.JavaPlugin"
      valueType: "java.lang.Class"
      genericValueType: "org.gradle.api.plugins.JavaPlugin"
      uuid: "class-JavaPlugin"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "configureAction-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSetOutput"
      uuid: "sourceSetOutput"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.FileCollection"
      uuid: "fileCollection2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.FileCollection"
      uuid: "fileCollection"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      uuid: "taskProvider"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "configurationAction-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      uuid: "taskProvider2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "test"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.testing.Test"
      uuid: "test"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "BASIC"
      content: !<regular>
        value: "verification"
      valueType: "java.lang.String"
      uuid: "group"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Runs the REST tests against an external cluster"
      valueType: "java.lang.String"
      uuid: "description"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Task"
      uuid: "task"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.gradle.api.tasks.TaskProvider"
            uuid: "taskProvider2"
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
- method:
    name: "setupYamlRestTestDependenciesDefaults"
    sourceCodeSignature: "void setupYamlRestTestDependenciesDefaults(Project project,\
      \ SourceSet sourceSet)"
    returnType: "void"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "sourceSet"
      type: "org.gradle.api.tasks.SourceSet"
    instructionFingerprint: "E18925254096A3C03C94E133FD388286"
  paths:
  - testPathName: "setupYamlRestTestDependenciesDefaultsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "sourceSet"
      valueUuid: "sourceSet"
    - type: "STATIC"
      name: "RestTestUtil.class"
      valueUuid: "RestTestUtil.class"
      methodExercised:
        expression: "setupYamlRestTestDependenciesDefaults(project,sourceSet,useNewTestClusters):void"
    - type: "RESULT"
      name: "result"
      valueUuid: "void2"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "sourceSet"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.internal.test.rest.RestTestUtil"
      uuid: "RestTestUtil.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "useNewTestClusters"
    - sapientType: "VOID"
      uuid: "void2"
- method:
    name: "setupYamlRestTestDependenciesDefaults"
    sourceCodeSignature: "void setupYamlRestTestDependenciesDefaults(Project project,\
      \ SourceSet sourceSet, boolean useNewTestClusters)"
    returnType: "void"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "sourceSet"
      type: "org.gradle.api.tasks.SourceSet"
    - name: "useNewTestClusters"
      type: "boolean"
    instructionFingerprint: "4F91476062BEACB78DE5B3D57305B99B"
  paths:
  - testPathName: "setupYamlRestTestDependenciesDefaults1WhenUseNewTestClusters"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "sourceSet"
      valueUuid: "sourceSet"
    - type: "INPUT"
      name: "useNewTestClusters"
      valueUuid: "useNewTestClusters"
    - type: "LOCAL_VARIABLE"
      valueUuid: "dependencyHandler"
      methodExercised:
        expression: "add(string,project2):dependency"
    - type: "LOCAL_VARIABLE"
      valueUuid: "dependencyHandler2"
      methodExercised:
        expression: "add(string2,project3):dependency2"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "findProject(path):project2"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getDependencies():dependencyHandler"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getDependencies():dependencyHandler2"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "project(path2):project3"
        throwsExceptions:
        - "org.gradle.api.UnknownProjectException"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getImplementationConfigurationName():string"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getImplementationConfigurationName():string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "sourceSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "useNewTestClusters"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.dsl.DependencyHandler"
      uuid: "dependencyHandler"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.Dependency"
      uuid: "dependency"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getImplementationConfigurationName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.dsl.DependencyHandler"
      uuid: "dependencyHandler2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.Dependency"
      uuid: "dependency2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getImplementationConfigurationName1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ":test:yaml-rest-runner"
      valueType: "java.lang.String"
      uuid: "path"
    - sapientType: "BASIC"
      content: !<regular>
        value: ":test:test-clusters"
      valueType: "java.lang.String"
      uuid: "path2"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 72
      expression: "yamlTestRunnerProject != null"
      range: "(72,13)-(72,41)"
      evaluatedAs: true
    - lineNumber: 74
      expression: "useNewTestClusters"
      range: "(74,17)-(74,34)"
      evaluatedAs: true
- method:
    name: "setupJavaRestTestDependenciesDefaults"
    sourceCodeSignature: "void setupJavaRestTestDependenciesDefaults(Project project,\
      \ SourceSet sourceSet)"
    returnType: "void"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "sourceSet"
      type: "org.gradle.api.tasks.SourceSet"
    instructionFingerprint: "62050ED11BEA67C5FD5A102CFA695B06"
  paths:
  - testPathName: "setupJavaRestTestDependenciesDefaultsWhenYamlTestRunnerProjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "sourceSet"
      valueUuid: "sourceSet"
    - type: "LOCAL_VARIABLE"
      valueUuid: "dependencyHandler"
      methodExercised:
        expression: "add(string,project2):dependency"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "findProject(path):project2"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getDependencies():dependencyHandler"
    - type: "LOCAL_VARIABLE"
      name: "sourceSet"
      valueUuid: "sourceSet"
      methodExercised:
        expression: "getImplementationConfigurationName():string"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "sourceSet"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.dsl.DependencyHandler"
      uuid: "dependencyHandler"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.Dependency"
      uuid: "dependency"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getImplementationConfigurationName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ":test:yaml-rest-runner"
      valueType: "java.lang.String"
      uuid: "path"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 87
      expression: "yamlTestRunnerProject != null"
      range: "(87,13)-(87,41)"
      evaluatedAs: true

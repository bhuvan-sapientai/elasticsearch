---
targetClass:
  fullClassName: "org.elasticsearch.gradle.ReaperPlugin"
methods:
- method:
    name: "apply"
    sourceCodeSignature: "void apply(Project project)"
    returnType: "void"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    instructionFingerprint: "CBE400CA03352722D6779D5B51E849F7"
  paths:
  - testPathName: "applyTest"
    constructorSignature: "<init>(org.gradle.api.file.ProjectLayout) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "STATIC"
      name: "ReaperPlugin.class"
      valueUuid: "ReaperPlugin.class"
      methodExercised:
        expression: "registerReaperService(project,projectLayout,internal):void"
    - type: "RESULT"
      name: "result"
      valueUuid: "void2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.elasticsearch.gradle.ReaperPlugin"
        parameters:
        - name: "projectLayout"
          value:
            sapientType: "MOCK"
            valueType: "org.gradle.api.file.ProjectLayout"
            uuid: "projectLayout"
      valueType: "org.elasticsearch.gradle.ReaperPlugin"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.ReaperPlugin"
      uuid: "ReaperPlugin.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.ProjectLayout"
      uuid: "projectLayout"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "internal"
    - sapientType: "VOID"
      uuid: "void2"
- method:
    name: "registerReaperService"
    sourceCodeSignature: "void registerReaperService(Project project, ProjectLayout\
      \ projectLayout, boolean internal)"
    returnType: "void"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    - name: "projectLayout"
      type: "org.gradle.api.file.ProjectLayout"
    - name: "internal"
      type: "boolean"
    instructionFingerprint: "BF96E05491E3889DA6AED1B83E4B51C5"
  paths:
  - testPathName: "registerReaperServiceWhenProjectNotEqualsProjectGetRootProjectThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "projectLayout"
      valueUuid: "projectLayout"
    - type: "INPUT"
      name: "internal"
      valueUuid: "internal"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getRootProject():project2"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.ProjectLayout"
      uuid: "projectLayout"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "internal"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "ReaperPlugin can only be applied to the root project of a build"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 42
      expression: "project != project.getRootProject()"
      range: "(42,13)-(42,47)"
      evaluatedAs: true
  - testPathName: "registerReaperServiceWhenProjectEqualsProjectGetRootProject"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "INPUT"
      name: "projectLayout"
      valueUuid: "projectLayout"
    - type: "INPUT"
      name: "internal"
      valueUuid: "internal"
    - type: "LOCAL_VARIABLE"
      valueUuid: "buildServiceParameters"
      methodExercised:
        expression: "getInputDir():directoryProperty"
    - type: "LOCAL_VARIABLE"
      valueUuid: "buildServiceParameters2"
      methodExercised:
        expression: "getBuildDir():directoryProperty2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "buildServiceParameters3"
      methodExercised:
        expression: "setInternal(boolean):void3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "buildServiceRegistry"
      methodExercised:
        expression: "registerIfAbsent(name,class-ReaperService,configureAction-any):provider"
    - type: "LOCAL_VARIABLE"
      name: "spec"
      valueUuid: "buildServiceSpec"
      methodExercised:
        expression: "getParameters():buildServiceParameters"
    - type: "LOCAL_VARIABLE"
      name: "spec"
      valueUuid: "buildServiceSpec"
      methodExercised:
        expression: "getParameters():buildServiceParameters2"
    - type: "LOCAL_VARIABLE"
      name: "spec"
      valueUuid: "buildServiceSpec"
      methodExercised:
        expression: "getParameters():buildServiceParameters3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "directory"
      methodExercised:
        expression: "dir(path):directory2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "directory2"
      methodExercised:
        expression: "dir(path2):directory3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "directory3"
      methodExercised:
        expression: "dir(path3):directory4"
    - type: "LOCAL_VARIABLE"
      valueUuid: "directory4"
      methodExercised:
        expression: "getAsFile():file"
    - type: "LOCAL_VARIABLE"
      valueUuid: "directoryProperty"
      methodExercised:
        expression: "set(file):void"
    - type: "LOCAL_VARIABLE"
      valueUuid: "directoryProperty2"
      methodExercised:
        expression: "set(directoryProperty3):void2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "gradle"
      methodExercised:
        expression: "getSharedServices():buildServiceRegistry"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getRootProject():project"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getGradle():gradle"
    - type: "LOCAL_VARIABLE"
      name: "projectLayout"
      valueUuid: "projectLayout"
      methodExercised:
        expression: "getProjectDirectory():directory"
    - type: "LOCAL_VARIABLE"
      name: "projectLayout"
      valueUuid: "projectLayout"
      methodExercised:
        expression: "getBuildDirectory():directoryProperty3"
    - type: "RESULT"
      name: "result"
      valueUuid: "void4"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.ProjectLayout"
      uuid: "projectLayout"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "internal"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.ReaperService$Params"
      uuid: "buildServiceParameters"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.DirectoryProperty"
      uuid: "directoryProperty"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.ReaperService$Params"
      uuid: "buildServiceParameters2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.DirectoryProperty"
      uuid: "directoryProperty2"
    - sapientType: "MOCK"
      valueType: "org.elasticsearch.gradle.ReaperService$Params"
      uuid: "buildServiceParameters3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "java.lang.Boolean"
      uuid: "boolean"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.services.BuildServiceRegistry"
      uuid: "buildServiceRegistry"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.provider.Provider"
      uuid: "provider"
    - sapientType: "BASIC"
      content: !<regular>
        value: "reaper"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.elasticsearch.gradle.ReaperService"
      valueType: "java.lang.Class"
      genericValueType: "org.elasticsearch.gradle.ReaperService"
      uuid: "class-ReaperService"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "configureAction-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.services.BuildServiceSpec"
      uuid: "buildServiceSpec"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.Directory"
      uuid: "directory"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.Directory"
      uuid: "directory2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ".gradle"
      valueType: "java.lang.String"
      uuid: "path"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.Directory"
      uuid: "directory3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "reaper"
      valueType: "java.lang.String"
      uuid: "path2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.Directory"
      uuid: "directory4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "build-83458"
      valueType: "java.lang.String"
      uuid: "path3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.file.DirectoryProperty"
      uuid: "directoryProperty3"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.invocation.Gradle"
      uuid: "gradle"
    - sapientType: "VOID"
      uuid: "void4"
    branches:
    - lineNumber: 42
      expression: "project != project.getRootProject()"
      range: "(42,13)-(42,47)"
      evaluatedAs: false

---
targetClass:
  fullClassName: "org.elasticsearch.gradle.internal.test.TestWithDependenciesPlugin"
methods:
- method:
    name: "apply"
    sourceCodeSignature: "void apply(final Project project)"
    returnType: "void"
    parameters:
    - name: "project"
      type: "org.gradle.api.Project"
    instructionFingerprint: "2B4940D370930098D06401530626A548"
  paths:
  - testPathName: "applyWhenBooleanValueOfExtraPropertiesGetIsEclipseToString"
    constructorSignature: "<init>() : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "LOCAL_VARIABLE"
      valueUuid: "extensionContainer"
      methodExercised:
        expression: "getExtraProperties():extraPropertiesExtension"
    - type: "LOCAL_VARIABLE"
      name: "extraProperties"
      valueUuid: "extraPropertiesExtension"
      methodExercised:
        expression: "has(name):boolean1"
    - type: "LOCAL_VARIABLE"
      name: "extraProperties"
      valueUuid: "extraPropertiesExtension"
      methodExercised:
        expression: "get(name2):object"
        throwsExceptions:
        - "org.gradle.api.plugins.ExtraPropertiesExtension$UnknownPropertyException"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getExtensions():extensionContainer"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.elasticsearch.gradle.internal.test.TestWithDependenciesPlugin"
        parameters: []
      valueType: "org.elasticsearch.gradle.internal.test.TestWithDependenciesPlugin"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.ExtensionContainer"
      uuid: "extensionContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.ExtraPropertiesExtension"
      uuid: "extraPropertiesExtension"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "isEclipse"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "object"
      nameForMock: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "isEclipse"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 38
      expression: "extraProperties.has(\\\"isEclipse\\\")"
      range: "(38,13)-(38,44)"
      evaluatedAs: true
    - lineNumber: 38
      expression: "Boolean.valueOf(extraProperties.get(\\\"isEclipse\\\").toString())"
      range: "(38,49)-(38,108)"
      evaluatedAs: true
  - testPathName: "applyWhenDepGetDependencyProjectGetPluginsHasPluginPluginBuildPlugin"
    constructorSignature: "<init>() : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "project"
      valueUuid: "project"
    - type: "LOCAL_VARIABLE"
      name: "testImplementationConfig"
      valueUuid: "configuration"
      methodExercised:
        expression: "getDependencies():dependencySet"
    - type: "LOCAL_VARIABLE"
      valueUuid: "configurationContainer"
      methodExercised:
        expression: "getByName(name3):configuration"
        throwsExceptions:
        - "org.gradle.api.artifacts.UnknownConfigurationException"
    - type: "LOCAL_VARIABLE"
      name: "copy"
      valueUuid: "copy"
      methodExercised:
        expression: "into(file2-any):abstractCopyTask"
    - type: "LOCAL_VARIABLE"
      name: "copy"
      valueUuid: "copy"
      methodExercised:
        expression: "from(objectArray):abstractCopyTask2"
    - type: "LOCAL_VARIABLE"
      name: "copy"
      valueUuid: "copy"
      methodExercised:
        expression: "from(objectArray2):abstractCopyTask3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "dependency"
      methodExercised:
        expression: "getDependencyProject():project2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "dependency"
      methodExercised:
        expression: "getDependencyProject():project3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "dependencySet"
      methodExercised:
        expression: "all(action2-any):void"
    - type: "LOCAL_VARIABLE"
      valueUuid: "extensionContainer"
      methodExercised:
        expression: "getExtraProperties():extraPropertiesExtension"
    - type: "LOCAL_VARIABLE"
      valueUuid: "extensionContainer2"
      methodExercised:
        expression: "getByType(class-SourceSetContainer):object3"
        throwsExceptions:
        - "org.gradle.api.UnknownDomainObjectException"
    - type: "LOCAL_VARIABLE"
      name: "extraProperties"
      valueUuid: "extraPropertiesExtension"
      methodExercised:
        expression: "has(name):boolean1"
    - type: "LOCAL_VARIABLE"
      name: "extraProperties"
      valueUuid: "extraPropertiesExtension"
      methodExercised:
        expression: "get(name2):object"
        throwsExceptions:
        - "org.gradle.api.plugins.ExtraPropertiesExtension$UnknownPropertyException"
    - type: "LOCAL_VARIABLE"
      valueUuid: "gradle"
      methodExercised:
        expression: "projectsEvaluated(action-any):void2"
    - type: "LOCAL_VARIABLE"
      name: "sourceSetContainer"
      valueUuid: "object3"
      methodExercised:
        expression: "getByName(name5):object4"
        throwsExceptions:
        - "org.gradle.api.UnknownDomainObjectException"
    - type: "LOCAL_VARIABLE"
      valueUuid: "object4"
      methodExercised:
        expression: "getOutput():sourceSetOutput"
    - type: "LOCAL_VARIABLE"
      valueUuid: "pluginContainer"
      methodExercised:
        expression: "hasPlugin(class-PluginBuildPlugin):boolean5"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getExtensions():extensionContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getConfigurations():configurationContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getGradle():gradle"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getBuildDir():file"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getTasks():taskContainer"
    - type: "LOCAL_VARIABLE"
      name: "project"
      valueUuid: "project"
      methodExercised:
        expression: "getExtensions():extensionContainer2"
    - type: "LOCAL_VARIABLE"
      valueUuid: "project2"
      methodExercised:
        expression: "getPlugins():pluginContainer"
    - type: "LOCAL_VARIABLE"
      name: "pluginProject"
      valueUuid: "project3"
      methodExercised:
        expression: "getName():string2"
    - type: "LOCAL_VARIABLE"
      name: "pluginProject"
      valueUuid: "project3"
      methodExercised:
        expression: "getName():string4"
    - type: "LOCAL_VARIABLE"
      name: "pluginProject"
      valueUuid: "project3"
      methodExercised:
        expression: "getTasks():taskContainer2"
    - type: "LOCAL_VARIABLE"
      name: "pluginProject"
      valueUuid: "project3"
      methodExercised:
        expression: "file(path):file3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "sourceSetOutput"
      methodExercised:
        expression: "dir(map,file2-any):void3"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer"
      methodExercised:
        expression: "register(string5,class-Copy,configurationAction-any):taskProvider"
        throwsExceptions:
        - "org.gradle.api.InvalidUserDataException"
    - type: "LOCAL_VARIABLE"
      valueUuid: "taskContainer2"
      methodExercised:
        expression: "named(name4):taskProvider2"
        throwsExceptions:
        - "org.gradle.api.UnknownTaskException"
    - type: "RESULT"
      name: "result"
      valueUuid: "void4"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "final File outputDir = new File(project.getBuildDir(), \\\"/generated-test-resources/\\\
        \" + pluginProject.getName());"
      lineNumber: 57
      details: "No constructor found to create an object without any exception for\
        \ class java.io.File"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.elasticsearch.gradle.internal.test.TestWithDependenciesPlugin"
        parameters: []
      valueType: "org.elasticsearch.gradle.internal.test.TestWithDependenciesPlugin"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.Configuration"
      uuid: "configuration"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.DependencySet"
      uuid: "dependencySet"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.ConfigurationContainer"
      uuid: "configurationContainer"
    - sapientType: "BASIC"
      content: !<regular>
        value: "testImplementation"
      valueType: "java.lang.String"
      uuid: "name3"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.Copy"
      uuid: "copy"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.AbstractCopyTask"
      uuid: "abstractCopyTask"
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file2-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.AbstractCopyTask"
      uuid: "abstractCopyTask2"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.gradle.api.tasks.TaskProvider"
            uuid: "taskProvider2"
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.AbstractCopyTask"
      uuid: "abstractCopyTask3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "file3-pathname"
            valueType: "java.io.File"
            uuid: "file3"
      valueType: "java.lang.Object[]"
      uuid: "objectArray2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.artifacts.ProjectDependency"
      uuid: "dependency"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.Project"
      uuid: "project3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "action2-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.ExtensionContainer"
      uuid: "extensionContainer"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.ExtraPropertiesExtension"
      uuid: "extraPropertiesExtension"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.ExtensionContainer"
      uuid: "extensionContainer2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSetContainer"
      uuid: "object3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.gradle.api.tasks.SourceSetContainer"
      valueType: "java.lang.Class"
      genericValueType: "org.gradle.api.tasks.SourceSetContainer"
      uuid: "class-SourceSetContainer"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "isEclipse"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "object"
      nameForMock: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "isEclipse"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.invocation.Gradle"
      uuid: "gradle"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      genericValueType: "? super org.gradle.api.invocation.Gradle"
      uuid: "action-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSet"
      uuid: "object4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "test"
      valueType: "java.lang.String"
      uuid: "name5"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.SourceSetOutput"
      uuid: "sourceSetOutput"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.plugins.PluginContainer"
      uuid: "pluginContainer"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.elasticsearch.gradle.plugin.PluginBuildPlugin"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.gradle.api.Plugin"
      uuid: "class-PluginBuildPlugin"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskContainer"
      uuid: "taskContainer2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file3-pathname"
      valueType: "java.io.File"
      uuid: "file3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "src/main/plugin-metadata"
      valueType: "java.lang.String"
      uuid: "path"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "builtBy"
              valueType: "java.lang.String"
              uuid: "key"
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "copyMetadata"
              valueType: "java.lang.String"
              uuid: "string5"
          uuid: "pair"
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "map"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      uuid: "taskProvider"
    - sapientType: "BASIC"
      content: !<regular>
        value: "copyMetadata"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.gradle.api.tasks.Copy"
      valueType: "java.lang.Class"
      genericValueType: "org.gradle.api.tasks.Copy"
      uuid: "class-Copy"
    - sapientType: "ANY"
      valueType: "org.gradle.api.Action"
      uuid: "configurationAction-any"
    - sapientType: "MOCK"
      valueType: "org.gradle.api.tasks.TaskProvider"
      uuid: "taskProvider2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "pluginProperties"
      valueType: "java.lang.String"
      uuid: "name4"
    - sapientType: "VOID"
      uuid: "void4"
    branches:
    - lineNumber: 38
      expression: "extraProperties.has(\\\"isEclipse\\\")"
      range: "(38,13)-(38,44)"
      evaluatedAs: true
    - lineNumber: 38
      expression: "Boolean.valueOf(extraProperties.get(\\\"isEclipse\\\").toString())"
      range: "(38,49)-(38,108)"
      evaluatedAs: false
    - lineNumber: 48
      expression: "dep instanceof ProjectDependency"
      range: "(48,17)-(48,48)"
      evaluatedAs: true
      internalMethodName: "lambda$apply$1"
    - lineNumber: 49
      expression: "((ProjectDependency) dep).getDependencyProject().getPlugins().hasPlugin(PluginBuildPlugin.class)"
      range: "(49,20)-(49,115)"
      evaluatedAs: true
      internalMethodName: "lambda$apply$1"
